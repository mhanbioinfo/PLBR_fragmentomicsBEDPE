## Load required packages
library(tidyverse)
library(multidplyr)
# library(multidplyr)
library(Rsamtools)
library(rtracklayer)
library(GenomicAlignments)
library(GenomicRanges)
library(devtools)
library(Homo.sapiens)
# library(Homo.sapiens)
library(biovizBase)
library(BSgenome.Hsapiens.UCSC.hg38)
library(readxl)
class(Homo.sapiens)
# class(Homo.sapiens)
options(stringsAsFactors=FALSE)
options(bitmapType='cairo')
BiocManager::install("Homo.sapiens")
library(Homo.sapiens)
class(Homo.sapiens)
## manual inputs
frag_main = "/Users/minghan/GDrive_minghanpughlab/PughLabPMH/_projects/fragmentomics/analysis003_pipeline/fragmentomics-main-teardown/"
file.exists(paste0(libdir,"/R/git_01-read_fragments.R"))
## manual inputs
frag_main = "/Users/minghan/GDrive_minghanpughlab/PughLabPMH/_projects/fragmentomics/analysis003_pipeline/fragmentomics-main-teardown/"
id <- "TGL48_0001_Ct_T_PE_312_WG.merged.sorted"
bam <- "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/data/TGL48_0001_Ct_T_PE_312_WG.merged.sorted.bam"
filters <- paste0(frag_main, "/extdata/filters.hg38.rda")
gaps <- paste0(frag_main, "/extdata/gaps.hg38.rda")
tiles <- paste0(frag_main, "/extdata/hg38_tiles.bed")
VNTRs <- paste0(frag_main, "/extdata/VNTRs.hg38.rda")
healthy <- paste0(frag_main, "/extdata/healthy.median.hg38.rda")
libdir <- frag_main
outdir <- "/Users/minghan/bioinfoproj/fragmentomics/pipeline/frag_ratio/manual_output/"
## Create output directory
dir.create(outdir)
file.exists(paste0(libdir,"/R/git_01-read_fragments.R"))
## Read GAlignmentPairs
indexed.bam <- gsub("$", ".bai", bam)
indexed.bam
if (!file.exists(indexed.bam)) {
indexBam(bamfile)
}
param <- ScanBamParam(flag = scanBamFlag(isPaired = TRUE,
isProperPair = TRUE,
isDuplicate = FALSE,
isSecondaryAlignment = FALSE,
isUnmappedQuery = FALSE),
mapqFilter = 30)
galp <- readGAlignmentPairs(bam, param = param)
galp
## Filter reads: 90-220bp on Autosomes and mitochondrial reads
frags <- granges(keepSeqlevels(galp, paste0("chr", 1:22), pruning.mode="coarse"),
on.discordant.seqnames="drop")
frags
library(tidyverse)
galp[str_detect(seqnames(galp), "chr[0-9]*$")]
galp[!str_detect(seqnames(galp), "chr[0-9]*$")]
library(Rsamtools)
mito <- granges(keepSeqlevels(galp, paste0("chrM"), pruning.mode="coarse"),
on.discordant.seqnames="drop")
mito
?seqinfo
keepSeqlevels(galp, paste0("chr", 1:22), pruning.mode="coarse")
ranges(galp)
first(galp, real.strand=FALSE)
second(galp, real.strand=FALSE)
first(galp, real.strand=FALSE)
second(galp, real.strand=FALSE)
galp
galp[seqnames(galp) == NA]
galp[is.na(seqnames(galp))]
galp[is.na(seqnames(galp))]
## Filter reads: 90-220bp on Autosomes and mitochondrial reads
frags2 <- granges(keepSeqlevels(galp, paste0("chr", 1:22), pruning.mode="coarse"))
frags2
length <- length(galp); length
w.all <- width(frags); w.all %>% head()
frags <- frags[which(w.all >= 90 & w.all <= 220)]
frags
gcs <- GCcontent(Hsapiens, unstrand(frags))
frags$gc <- gcs
frags
## Extract Mitochondrial reads
mt_nFrag <- length(mito)
mt_nFrag %>% head()
mt_nFrag
mt_width <- width(mito)
mt_width
mt_width %>% head()
## Calculate mitochondrial stats
mt_median <- median(mt_width); mt_median
mt_mean <- mean(mt_width); mt_mean
dens <- density(mt_width)
dens <- density(mt_width); dens
dens <- density(mt_width); dens
#
# Data: mt_width (150 obs.);	Bandwidth 'bw' = 14.02
#
# x                y
# Min.   : 46.94   Min.   :6.050e-06
# 1st Qu.:107.97   1st Qu.:1.224e-03
# Median :169.00   Median :3.065e-03
# Mean   :169.00   Mean   :4.092e-03
# 3rd Qu.:230.03   3rd Qu.:6.542e-03
# Max.   :291.06   Max.   :1.051e-02
mt_mode <- dens$x[which.max(dens$y)]; mt_mode
#
# Data: mt_width (150 obs.);	Bandwidth 'bw' = 14.02
#
# x                y
# Min.   : 46.94   Min.   :6.050e-06
# 1st Qu.:107.97   1st Qu.:1.224e-03
# Median :169.00   Median :3.065e-03
# Mean   :169.00   Mean   :4.092e-03
# 3rd Qu.:230.03   3rd Qu.:6.542e-03
# Max.   :291.06   Max.   :1.051e-02
which.max(dens$y)
dens$y
dens$x
## Calculate mitochondrial stats
mt_median <- median(mt_width); mt_median # [1] 137
source("~/GDrive_minghanpughlab/PughLabPMH/_projects/fragmentomics/analysis003_pipeline/fragmentomics-main-teardown/R/git_02-mito_frag.R")
source("~/GDrive_minghanpughlab/PughLabPMH/_projects/fragmentomics/analysis003_pipeline/fragmentomics-main-teardown/R/git_03-100kb_bins.R")
source("~/GDrive_minghanpughlab/PughLabPMH/_projects/fragmentomics/analysis003_pipeline/fragmentomics-main-teardown/R/git_05-summary.R")
source("~/GDrive_minghanpughlab/PughLabPMH/_projects/fragmentomics/analysis003_pipeline/fragmentomics-main-teardown/R/git_03-100kb_bins.R")
source("~/GDrive_minghanpughlab/PughLabPMH/_projects/fragmentomics/analysis003_pipeline/fragmentomics-main-teardown/R/git_01-read_fragments.R")
source("~/GDrive_minghanpughlab/PughLabPMH/_projects/fragmentomics/analysis003_pipeline/fragmentomics-main-teardown/R/git_03-100kb_bins.R")
source("~/GDrive_minghanpughlab/PughLabPMH/_projects/fragmentomics/analysis003_pipeline/fragmentomics-main-teardown/R/git_04-5Mb_bins.R")
source("~/GDrive_minghanpughlab/PughLabPMH/_projects/fragmentomics/analysis003_pipeline/fragmentomics-main-teardown/R/git_05-summary.R")
source("~/GDrive_minghanpughlab/PughLabPMH/_projects/fragmentomics/analysis003_pipeline/fragmentomics-main-teardown/R/git_06-plotting.R")
source("~/GDrive_minghanpughlab/PughLabPMH/_projects/fragmentomics/analysis003_pipeline/fragmentomics-main-teardown/R/git_01-read_fragments.R")
## GC correct function
gc.correct <- function(coverage, bias) {
i <- seq(min(bias, na.rm=TRUE), max(bias, na.rm=TRUE), by = 0.001)
coverage.trend <- loess(coverage ~ bias, na.action = na.omit)
coverage.model <- loess(predict(coverage.trend, i) ~ i, na.action = na.omit)
coverage.pred <- predict(coverage.model, bias)
coverage.corrected <- coverage - coverage.pred + median(coverage, na.rm=TRUE)
}
## Load in gaps, filters, and tiles
load(filters)
filters
filters.hg38
# GRanges object with 910 ranges and 0 metadata columns:
#        seqnames            ranges strand
#          <Rle>         <IRanges>  <Rle>
#   [1]     chr1     628904-635104      *
#   [2]     chr1   5850088-5850571      *
#   [3]     chr1   8909611-8910014      *
load(gaps)
gaps.hg38
load(VNTRs)
VNTRs.hg38
hsapiens <- BSgenome.Hsapiens.UCSC.hg38::Hsapiens
hsapiens
tiles
AB <- read.table(tiles, col.names = c("chrom", "chromStart", "chromEnd", "Seqlength"))
AB
## Make filtered 100kb bins
AB <- makeGRangesFromDataFrame(AB, keep.extra.columns=TRUE)
AB
chromosomes <- GRanges(paste0("chr", 1:22),
IRanges(0, seqlengths(Hsapiens)[1:22]))
chromosomes
tcmeres <- gaps.hg38[grepl("centromere|telomere", gaps.hg38$type)]
tcmeres
arms <- GenomicRanges::setdiff(chromosomes, tcmeres)
arms
